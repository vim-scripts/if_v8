Index: src/SConscript
===================================================================
--- src/SConscript	(revision 1788)
+++ src/SConscript	(working copy)
@@ -130,7 +130,7 @@
 
 
 def ConfigureObjectFiles():
-  env = Environment()
+  env = Environment(tools=['mingw'])
   env.Replace(**context.flags['v8'])
   context.ApplyEnvOverrides(env)
   env['BUILDERS']['JS2C'] = Builder(action=js2c.JS2C)
Index: SConstruct
===================================================================
--- SConstruct	(revision 1788)
+++ SConstruct	(working copy)
@@ -120,7 +120,7 @@
     },
     'os:win32': {
       'CCFLAGS':      ['-DWIN32'],
-      'CXXFLAGS':     ['-DWIN32'],
+      'CXXFLAGS':     ['-DWIN32', '-D_WIN32_WINNT=0x0501'],
     },
     'os:android': {
       'CPPDEFINES':   ['ANDROID', '__ARM_ARCH_5__', '__ARM_ARCH_5T__',
@@ -203,7 +203,11 @@
     },
     'disassembler:on': {
       'CPPDEFINES':   ['ENABLE_DISASSEMBLER']
-    }
+    },
+    'library:shared': {
+      'CPPDEFINES': ['BUILDING_V8_SHARED'],
+      'LIBS': ['winmm', 'ws2_32']
+    },
   },
   'msvc': {
     'all': {
@@ -434,7 +438,7 @@
 
 
 def GuessToolchain(os):
-  tools = Environment()['TOOLS']
+  tools = Environment(tools=['mingw'])['TOOLS']
   if 'gcc' in tools:
     return 'gcc'
   elif 'msvc' in tools:
@@ -710,13 +714,13 @@
     library = env.SharedLibrary(library_name, object_files, PDB=pdb_name)
   context.library_targets.append(library)
 
-  d8_env = Environment()
+  d8_env = Environment(tools=['mingw'])
   d8_env.Replace(**context.flags['d8'])
   shell = d8_env.Program('d8' + suffix, object_files + shell_files)
   context.d8_targets.append(shell)
 
   for sample in context.samples:
-    sample_env = Environment(LIBRARY=library_name)
+    sample_env = Environment(tools=['mingw'], LIBRARY=library_name)
     sample_env.Replace(**context.flags['sample'])
     context.ApplyEnvOverrides(sample_env)
     sample_object = sample_env.SConscript(
@@ -743,7 +747,7 @@
 
 def Build():
   opts = GetOptions()
-  env = Environment(options=opts)
+  env = Environment(tools=['mingw'], options=opts)
   Help(opts.GenerateHelpText(env))
   VerifyOptions(env)
   env_overrides = ParseEnvOverrides(env['env'], env['importenv'])
